const Login = () => {   //로그인 컴포넌트
    const classes = useStyles();    // 스타일 관련입니다.
    return (
        <AuthContext.Consumer>  //Consumer로 값을 받아옵니다. Provider는 AuthContext에서 이미 구현 했기 때문에 필요 없습니다.
            {({ authorize, onLogin, error }) => (   //Consumer 내부엔 함수가 들어가야합니다.
                (authorize ? <Navigate to='/dashboard' /> : //로그인이 성공 하면 dashboard로 가도록 하고 실패한 경우엔 아래의 문구들을 실행합니다.
                    <Page   //단순하게 디자인을 위한 태그는 따로 분석하지 않습니다.
                        className={classes.root}
                        title="Login"   
                    >
                        <Box
                            display="flex"
                            flexDirection="column"
                            height="100%"
                            justifyContent="center"
                        >
                            <Container maxWidth="sm">
                                <Formik //Formik 태그
                                    initialValues={{ //Formik 태그 안에 반드시 들어가야할 props 이며 초기값 입니다.
                                        email: 'test@test.com',
                                        password: 'test123'
                                    }}
                                    validationSchema={Yup.object().shape({
                                        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),
                                        password: Yup.string().max(255).required('Password is required')
                                    })}
                                    onSubmit={model => { //Forik 태그 안에 반드시 들어가야할 props이며 제출 시에 실행 될 함수입니다.
                                        onLogin(model); //onLogin 함수에 model을 파라미터로 보냅니다. Provider에 있는 onLogin을 사용합니다.
                                    }}
                                >
                                    {({
                                        errors,
                                        handleBlur,
                                        handleChange,
                                        handleSubmit,
                                        touched,
                                        values  //initialValues를 타입으로 갖게 되는 실제 폼에 들어갈 값
                                    }) => (
                                            <form onSubmit={handleSubmit}>
                                                {
                                                    error && (<div className={classes.alert}>
                                                        <Alert severity="error"><AlertTitle>Error</AlertTitle>Your username or your password is <strong>incorrect!</strong></Alert>
                                                    </div>)
                                                }
                                                <TextField //파라미터 값들을 여기서 사용합니다.
                                                    error={Boolean(touched.email && errors.email)}
                                                    fullWidth
                                                    helperText={touched.email && errors.email}
                                                    label="Email Address"
                                                    margin="normal"
                                                    name="email"
                                                    onBlur={handleBlur}
                                                    onChange={handleChange}
                                                    type="email"
                                                    value={values.email}
                                                    variant="outlined"
                                                />
                                                <TextField  //마찬가지로 파라미터 값들을 여기서 사용합니다.
                                                    error={Boolean(touched.password && errors.password)}
                                                    fullWidth
                                                    helperText={touched.password && errors.password}
                                                    label="Password"
                                                    margin="normal"
                                                    name="password"
                                                    onBlur={handleBlur}
                                                    onChange={handleChange}
                                                    type="password"
                                                    value={values.password}
                                                    variant="outlined"
                                                />
                                                <Box my={2}>
                                                    <Button //양식을 두번 보내지 않기 위한 버튼입니다.
                                                        color="primary"
                                                        fullWidth
                                                        size="large"
                                                        type="submit"
                                                        variant="contained"
                                                    >
                                                        Sign in now
                                                    </Button>
                                                </Box>
                                            </form>
                                        )}
                                </Formik>
                            </Container>
                        </Box>
                    </Page>
                )
            )}
        </AuthContext.Consumer>
    );
}

export default Login;