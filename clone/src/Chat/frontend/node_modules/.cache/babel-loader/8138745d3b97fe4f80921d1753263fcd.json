{"ast":null,"code":"var _jsxFileName = \"/Users/chan/Desktop/Coder/StartPlayUp/StartPlay-Jsc1/frontend/src/JSC/Component/ChatComponent/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport Message from './Message';\nimport MyTextInput from \"./MyTextInput\";\nimport Nav from \"./Nav\";\nimport { UserContext } from \"../../store\";\nimport io from \"socket.io-client\";\nimport { chatAddMessage } from \"../../Common/chat\";\nimport { RECEIVE_MESSAGE, socketApi } from \"../../Common/socketApi\";\nimport SideVoiceUser from \"./SideVoiceUser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextField = styled.div`\n  display:flex;\n  padding:10px;\n  border: rgb(0, 0, 0);\n  flex-direction: column;\n  overflow-y: scroll;\n  height:${props => props.width || 600}px;\n  width:inherit;\n  border-right:3px solid #ececec;\n  background-color: white;\n  \n  &::-webkit-scrollbar{\n    width: 100%;\n    background-color: black;\n  }\n  \n`;\n_c = TextField;\nconst Chat = styled.div`\n\n    display:flex;\n    flex-direction: column;\n    height:${props => props.width || 600}px;\n    width:${props => props.width || 600}px;\n    border-radius: 10%;\n`;\n_c2 = Chat;\nconst TextFieldWithVoiceUsers = styled.div`\n      background-color: white;\n      width: inherit;\n      display: flex;\n      flex-direction: row;\n`; // const currentSocket = io.connect(\"/\");\n\n_c3 = TextFieldWithVoiceUsers;\n\nfunction Index({\n  backgroundColor,\n  height,\n  width,\n  ...props\n}) {\n  _s();\n\n  const socketRef = useRef();\n  const {\n    user,\n    isAuthenticated,\n    dispatch\n  } = useContext(UserContext);\n  const myNickName = user;\n  console.log(\"[debug] : \", user, isAuthenticated);\n  const [chatList, setChatList] = useState([]);\n  const scrollRef = useRef(null);\n\n  const scrollToBottom = () => {\n    const {\n      scrollHeight,\n      clientHeight\n    } = scrollRef.current;\n    scrollRef.current.scrollTop = scrollHeight - clientHeight;\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n  }, []);\n  useEffect(() => {\n    socketApi(RECEIVE_MESSAGE, {\n      socketRef,\n      chatList,\n      setChatList\n    }, chatAddMessage);\n    return () => socketApi(RECEIVE_MESSAGE, {\n      socketRef,\n      socketOnOff: false\n    });\n  }, [chatList]);\n  useEffect(() => {\n    console.log(chatList);\n    scrollToBottom();\n  }, [chatList]);\n  return /*#__PURE__*/_jsxDEV(Chat, {\n    width: height,\n    height: width,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextFieldWithVoiceUsers, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: \"textField\",\n        ref: scrollRef,\n        children: chatList.map((i, index) => /*#__PURE__*/_jsxDEV(Message, {\n          who: i.nickname === myNickName ? \"me\" : \"another\",\n          chatObject: i,\n          chatList: chatList\n        }, \"chat\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SideVoiceUser, {\n        socketRef: socketRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n      nickname: myNickName,\n      chatList: chatList,\n      setChatList: setChatList,\n      socketRef: socketRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Index, \"PHJprohEOWH94TBbZUN1WFcqbxc=\");\n\n_c4 = Index;\nexport default _c5 = /*#__PURE__*/memo(Index);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TextField\");\n$RefreshReg$(_c2, \"Chat\");\n$RefreshReg$(_c3, \"TextFieldWithVoiceUsers\");\n$RefreshReg$(_c4, \"Index\");\n$RefreshReg$(_c5, \"%default%\");","map":{"version":3,"sources":["/Users/chan/Desktop/Coder/StartPlayUp/StartPlay-Jsc1/frontend/src/JSC/Component/ChatComponent/index.jsx"],"names":["React","memo","useContext","useEffect","useRef","useState","styled","Message","MyTextInput","Nav","UserContext","io","chatAddMessage","RECEIVE_MESSAGE","socketApi","SideVoiceUser","TextField","div","props","width","Chat","TextFieldWithVoiceUsers","Index","backgroundColor","height","socketRef","user","isAuthenticated","dispatch","myNickName","console","log","chatList","setChatList","scrollRef","scrollToBottom","scrollHeight","clientHeight","current","scrollTop","connect","socketOnOff","map","i","index","nickname"],"mappings":"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","sourcesContent":["import React, {memo, useContext, useEffect, useRef, useState} from 'react';\nimport styled from 'styled-components'\nimport Message from './Message'\nimport MyTextInput from \"./MyTextInput\";\nimport Nav from \"./Nav\";\nimport {UserContext} from \"../../store\";\nimport io from \"socket.io-client\";\nimport {chatAddMessage} from \"../../Common/chat\"\nimport {RECEIVE_MESSAGE, socketApi} from \"../../Common/socketApi\";\nimport SideVoiceUser from \"./SideVoiceUser\";\n\nconst TextField = styled.div`\n  display:flex;\n  padding:10px;\n  border: rgb(0, 0, 0);\n  flex-direction: column;\n  overflow-y: scroll;\n  height:${props => props.width || 600}px;\n  width:inherit;\n  border-right:3px solid #ececec;\n  background-color: white;\n  \n  &::-webkit-scrollbar{\n    width: 100%;\n    background-color: black;\n  }\n  \n`;\n\nconst Chat = styled.div`\n\n    display:flex;\n    flex-direction: column;\n    height:${props => props.width || 600}px;\n    width:${props => props.width || 600}px;\n    border-radius: 10%;\n`;\n\nconst TextFieldWithVoiceUsers = styled.div`\n      background-color: white;\n      width: inherit;\n      display: flex;\n      flex-direction: row;\n`;\n\n// const currentSocket = io.connect(\"/\");\n\nfunction Index({backgroundColor, height, width, ...props}) {\n    const socketRef = useRef();\n    const {user, isAuthenticated, dispatch} = useContext(UserContext);\n    const myNickName = user;\n    console.log(\"[debug] : \", user, isAuthenticated);\n    const [chatList, setChatList] = useState([]);\n    const scrollRef = useRef(null);\n    const scrollToBottom = () => {\n        const {scrollHeight, clientHeight} = scrollRef.current;\n        scrollRef.current.scrollTop = scrollHeight - clientHeight;\n    };\n    useEffect(()=>{\n        socketRef.current = io.connect(\"/\");\n    },[]);\n\n    useEffect(() => {\n        socketApi(RECEIVE_MESSAGE, {socketRef, chatList, setChatList}, chatAddMessage);\n        return () => socketApi(RECEIVE_MESSAGE, {socketRef, socketOnOff: false});\n    }, [chatList]);\n\n\n    useEffect(() => {\n        console.log(chatList);\n        scrollToBottom();\n    }, [chatList]);\n    return (\n        <Chat width={height} height={width}>\n\n            <Nav/>\n            <TextFieldWithVoiceUsers>\n                <TextField className=\"textField\" ref={scrollRef}>\n                    {chatList.map((i, index) => <Message key={\"chat\" + index}\n                                                         who={i.nickname === myNickName ? \"me\" : \"another\"}\n                                                         chatObject={i} chatList={chatList}/>)}\n                </TextField>\n                <SideVoiceUser socketRef={socketRef}/>\n            </TextFieldWithVoiceUsers>\n            <MyTextInput nickname={myNickName} chatList={chatList} setChatList={setChatList}\n                         socketRef={socketRef}/>\n\n        </Chat>\n    );\n}\n\nexport default memo(Index);\n"]},"metadata":{},"sourceType":"module"}