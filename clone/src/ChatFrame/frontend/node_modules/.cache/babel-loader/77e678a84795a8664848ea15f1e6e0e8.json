{"ast":null,"code":"import Peer from \"simple-peer\";\nimport { getDataFromPeerOn } from \"../../receiveFromPeers\";\n\nrequire(\"dotenv\").config();\n\nexport const connectDataPeer = ({\n  socketRef,\n  roomID,\n  peersRef,\n  setPeers,\n  chatListRef,\n  setChatList,\n  myNickname,\n  setPeerData\n}) => {\n  socketRef.current.emit(\"join room\", {\n    roomID,\n    myNickname\n  });\n  socketRef.current.on(\"Duplicate ID\", users => {\n    return false;\n  });\n  socketRef.current.on(\"all users\", users => {\n    const peers = [];\n    users.forEach(userID => {\n      const peer = createPeer(userID, socketRef.current.id);\n      peersRef.current.push({\n        peerID: userID,\n        peer,\n        nickname: \"\"\n      });\n      peers.push({\n        peer,\n        nickname: \"연결중\"\n      });\n    });\n    setPeers(peers);\n  });\n  socketRef.current.on(\"user joined\", ({\n    signal,\n    callerID,\n    peerNickname\n  }) => {\n    const peer = addPeer(signal, callerID);\n    peersRef.current.push({\n      peerID: callerID,\n      peer,\n      nickname: peerNickname\n    });\n    console.log(\"[debug : addPeer : \", peersRef.current);\n    setPeers(peersRef.current.map(i => ({\n      peer: i.peer,\n      nickname: i.nickname\n    })));\n  });\n  socketRef.current.on(\"receiving returned signal\", ({\n    id,\n    signal,\n    peerNickname\n  }) => {\n    const item = peersRef.current.find(p => p.peerID === id);\n    item.peer.signal(signal);\n    item.nickname = peerNickname;\n    setPeers(peersRef.current.map(i => ({\n      peer: i.peer,\n      nickname: i.nickname\n    })));\n    console.log(\"receiving returned signal\", peerNickname);\n  });\n  socketRef.current.on(\"disconnect user\", socketID => {\n    console.log(socketID);\n    console.log(\"disconnect user : \", peersRef.current);\n    peersRef.current = peersRef.current.filter(i => i.peerID !== socketID);\n    console.log(\"disconnect user : \", peersRef.current);\n    setPeers(peersRef.current.map(i => ({\n      peer: i.peer,\n      nickname: i.nickname\n    })));\n  });\n\n  function createPeer(userToSignal, callerID) {\n    //처음 webrtc를 연결할 때 이미 방에 연결되어있는 피어 추가\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      iceServers: [{\n        urls: process.env.STUN_DOMAIN\n      }, {\n        urls: process.env.TURN_DOMAIN,\n        username: process.env.TURN_ID,\n        credential: process.env.PASSWORD\n      }]\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal,\n        myNickname\n      });\n    });\n    getDataFromPeerOn({\n      peer,\n      chatListRef,\n      setChatList,\n      setPeerData\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID) {\n    // webrtc연결 후 추가적인 인원이 들어올때 피어 추가\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      iceServers: [{\n        urls: process.env.STUN_DOMAIN\n      }, {\n        urls: process.env.TURN_DOMAIN,\n        username: process.env.TURN_ID,\n        credential: process.env.PASSWORD\n      }]\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID,\n        myNickname\n      });\n    });\n    peer.signal(incomingSignal);\n    getDataFromPeerOn({\n      peer,\n      chatListRef,\n      setChatList,\n      setPeerData\n    });\n    return peer;\n  }\n};","map":{"version":3,"sources":["/Users/chan/Desktop/Coder/TestFile/startPlayUp/frontend/src/JSC/Common/peerModule/CreatePeer/createDataPeers/index.js"],"names":["Peer","getDataFromPeerOn","require","config","connectDataPeer","socketRef","roomID","peersRef","setPeers","chatListRef","setChatList","myNickname","setPeerData","current","emit","on","users","peers","forEach","userID","peer","createPeer","id","push","peerID","nickname","signal","callerID","peerNickname","addPeer","console","log","map","i","item","find","p","socketID","filter","userToSignal","initiator","trickle","iceServers","urls","process","env","STUN_DOMAIN","TURN_DOMAIN","username","TURN_ID","credential","PASSWORD","incomingSignal"],"mappings":"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","sourcesContent":["import Peer from \"simple-peer\";\nimport { getDataFromPeerOn } from \"../../receiveFromPeers\"\nrequire(\"dotenv\").config()\n\nexport const connectDataPeer = ({ socketRef, roomID, peersRef, setPeers, chatListRef, setChatList, myNickname, setPeerData }) => {\n    socketRef.current.emit(\"join room\", { roomID, myNickname });\n    socketRef.current.on(\"Duplicate ID\", users => {\n        return false;\n    })\n    socketRef.current.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n            const peer = createPeer(userID, socketRef.current.id);\n            peersRef.current.push({\n                peerID: userID,\n                peer,\n                nickname: \"\",\n            });\n            peers.push({ peer, nickname: \"연결중\" });\n        });\n        setPeers(peers);\n    });\n\n    socketRef.current.on(\"user joined\", ({ signal, callerID, peerNickname }) => {\n        const peer = addPeer(signal, callerID);\n        peersRef.current.push({\n            peerID: callerID,\n            peer,\n            nickname: peerNickname,\n        })\n        console.log(\"[debug : addPeer : \", peersRef.current);\n        setPeers(peersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n    });\n\n    socketRef.current.on(\"receiving returned signal\", ({ id, signal, peerNickname }) => {\n        const item = peersRef.current.find(p => p.peerID === id);\n        item.peer.signal(signal);\n        item.nickname = peerNickname;\n        setPeers(peersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n        console.log(\"receiving returned signal\", peerNickname);\n    });\n\n    socketRef.current.on(\"disconnect user\", (socketID) => {\n        console.log(socketID);\n        console.log(\"disconnect user : \", peersRef.current);\n        peersRef.current = peersRef.current.filter((i) => i.peerID !== socketID)\n        console.log(\"disconnect user : \", peersRef.current);\n        setPeers(peersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n    });\n    function createPeer(userToSignal, callerID) {\n        //처음 webrtc를 연결할 때 이미 방에 연결되어있는 피어 추가\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            iceServers: [\n                {\n                    urls: process.env.STUN_DOMAIN,\n                },\n                {\n                    urls: process.env.TURN_DOMAIN,\n                    username: process.env.TURN_ID,\n                    credential: process.env.PASSWORD\n                }\n            ],\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal, myNickname })\n        })\n        getDataFromPeerOn({ peer, chatListRef, setChatList, setPeerData });\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID) {\n        // webrtc연결 후 추가적인 인원이 들어올때 피어 추가\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            iceServers: [\n                {\n                    urls: process.env.STUN_DOMAIN,\n                },\n                {\n                    urls: process.env.TURN_DOMAIN,\n                    username: process.env.TURN_ID,\n                    credential: process.env.PASSWORD\n                }\n            ],\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID, myNickname })\n        });\n\n        peer.signal(incomingSignal);\n        getDataFromPeerOn({ peer, chatListRef, setChatList, setPeerData });\n        return peer;\n    }\n}"]},"metadata":{},"sourceType":"module"}