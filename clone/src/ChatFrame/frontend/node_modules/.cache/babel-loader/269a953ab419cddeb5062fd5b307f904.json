{"ast":null,"code":"import Peer from \"simple-peer\";\nexport const connectVoicePeer = ({\n  socketRef,\n  roomID,\n  voicePeersRef,\n  setVoicePeers,\n  myNickname\n}) => {\n  navigator.mediaDevices.getUserMedia({\n    video: false,\n    audio: true\n  }).then(stream => {\n    socketRef.current.emit(\"join voice room\", {\n      roomID,\n      myNickname\n    });\n    socketRef.current.on(\"all voice users\", users => {\n      const peers = [];\n      users.forEach(userID => {\n        const peer = createPeer(userID, socketRef.current.id, stream);\n        voicePeersRef.current.push({\n          peerID: userID,\n          peer,\n          nickname: \"\"\n        });\n        peers.push({\n          peer,\n          nickname: \"연결중\"\n        });\n      });\n      setVoicePeers(peers);\n    });\n    socketRef.current.on(\"voice user joined\", ({\n      signal,\n      callerID,\n      peerNickname\n    }) => {\n      const peer = addPeer(signal, callerID, stream);\n      voicePeersRef.current.push({\n        peerID: callerID,\n        peer,\n        nickname: peerNickname\n      });\n      console.log(\"[debug : addPeer : \", voicePeersRef.current);\n      setVoicePeers(voicePeersRef.current.map(i => ({\n        peer: i.peer,\n        nickname: i.nickname\n      })));\n    });\n    socketRef.current.on(\"receiving returned voice signal\", ({\n      id,\n      signal,\n      peerNickname\n    }) => {\n      const item = voicePeersRef.current.find(p => p.peerID === id);\n      item.peer.signal(signal);\n      item.nickname = peerNickname;\n      setVoicePeers(voicePeersRef.current.map(i => ({\n        peer: i.peer,\n        nickname: i.nickname\n      })));\n      console.log(\"receiving returned voice signal\", peerNickname);\n    }); // socketRef.current.on(\"disconnect voice user\", (socketID) => {\n    //     console.log(socketID);\n    //     console.log(\"disconnect voice user : \", voicePeersRef.current);\n    //     voicePeersRef.current = voicePeersRef.current.filter((i) => i.peerID !== socketID)\n    //     console.log(\"disconnect voice user : \", voicePeersRef.current);\n    //     setVoicePeers(voicePeersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n    // });\n  }).catch(e => console.log(e));\n\n  function createPeer(userToSignal, callerID, stream) {\n    //처음 webrtc를 연결할 때 이미 방에 연결되어있는 피어 추가\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n      iceServers: [{\n        urls: process.env.STUN_DOMAIN\n      }, {\n        urls: process.env.TURN_DOMAIN,\n        username: process.env.TURN_ID,\n        credential: process.env.PASSWORD\n      }]\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending voice signal\", {\n        userToSignal,\n        callerID,\n        signal,\n        myNickname\n      });\n    }); // connectVoiceRef({ peer, voiceRef });\n\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    // webrtc연결 후 추가적인 인원이 들어올때 피어 추가\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n      iceServers: [{\n        urls: process.env.STUN_DOMAIN\n      }, {\n        urls: process.env.TURN_DOMAIN,\n        username: process.env.TURN_ID,\n        credential: process.env.PASSWORD\n      }]\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning voice signal\", {\n        signal,\n        callerID,\n        myNickname\n      });\n    });\n    peer.signal(incomingSignal); // connectVoiceRef({ peer, voiceRef });\n\n    return peer;\n  }\n\n  const connectVoiceRef = ({\n    peer,\n    voiceRef\n  }) => {\n    // 음성 채팅 추가 부분. \n    peer.on(\"stream\", stream => {\n      console.log(\"[debug] : voiceRef\");\n\n      if (\"srcObject\" in voiceRef.current) {\n        console.log(\"voiceRef\", voiceRef.current);\n        voiceRef.current.srcObject = stream;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/chan/Desktop/Coder/TestFile/startPlayUp/frontend/src/JSC/Common/peerModule/CreatePeer/createVoicePeers/index.js"],"names":["Peer","connectVoicePeer","socketRef","roomID","voicePeersRef","setVoicePeers","myNickname","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","emit","on","users","peers","forEach","userID","peer","createPeer","id","push","peerID","nickname","signal","callerID","peerNickname","addPeer","console","log","map","i","item","find","p","catch","e","userToSignal","initiator","trickle","iceServers","urls","process","env","STUN_DOMAIN","TURN_DOMAIN","username","TURN_ID","credential","PASSWORD","incomingSignal","connectVoiceRef","voiceRef","srcObject"],"mappings":"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","sourcesContent":["import Peer from \"simple-peer\";\nexport const connectVoicePeer = ({ socketRef, roomID, voicePeersRef, setVoicePeers, myNickname }) => {\n    navigator.mediaDevices.getUserMedia({ video: false, audio: true }).then(stream => {\n        socketRef.current.emit(\"join voice room\", { roomID, myNickname });\n\n        socketRef.current.on(\"all voice users\", users => {\n            const peers = [];\n            users.forEach(userID => {\n                const peer = createPeer(userID, socketRef.current.id, stream);\n                voicePeersRef.current.push({\n                    peerID: userID,\n                    peer,\n                    nickname: \"\",\n                });\n                peers.push({ peer, nickname: \"연결중\" });\n            });\n            setVoicePeers(peers);\n        });\n\n        socketRef.current.on(\"voice user joined\", ({ signal, callerID, peerNickname }) => {\n            const peer = addPeer(signal, callerID, stream);\n            voicePeersRef.current.push({\n                peerID: callerID,\n                peer,\n                nickname: peerNickname,\n            })\n            console.log(\"[debug : addPeer : \", voicePeersRef.current);\n            setVoicePeers(voicePeersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n        });\n\n        socketRef.current.on(\"receiving returned voice signal\", ({ id, signal, peerNickname }) => {\n            const item = voicePeersRef.current.find(p => p.peerID === id);\n            item.peer.signal(signal);\n            item.nickname = peerNickname;\n            setVoicePeers(voicePeersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n            console.log(\"receiving returned voice signal\", peerNickname);\n        });\n\n        // socketRef.current.on(\"disconnect voice user\", (socketID) => {\n        //     console.log(socketID);\n        //     console.log(\"disconnect voice user : \", voicePeersRef.current);\n        //     voicePeersRef.current = voicePeersRef.current.filter((i) => i.peerID !== socketID)\n        //     console.log(\"disconnect voice user : \", voicePeersRef.current);\n        //     setVoicePeers(voicePeersRef.current.map((i) => ({ peer: i.peer, nickname: i.nickname })));\n        // });\n\n    }).catch((e) => console.log(e));\n\n    function createPeer(userToSignal, callerID, stream) {\n        //처음 webrtc를 연결할 때 이미 방에 연결되어있는 피어 추가\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n            iceServers: [\n                {\n                    urls: process.env.STUN_DOMAIN,\n                },\n                {\n                    urls: process.env.TURN_DOMAIN,\n                    username: process.env.TURN_ID,\n                    credential: process.env.PASSWORD\n                }\n            ],\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending voice signal\", { userToSignal, callerID, signal, myNickname })\n        })\n        // connectVoiceRef({ peer, voiceRef });\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        // webrtc연결 후 추가적인 인원이 들어올때 피어 추가\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n            iceServers: [\n                {\n                    urls: process.env.STUN_DOMAIN,\n                },\n                {\n                    urls: process.env.TURN_DOMAIN,\n                    username: process.env.TURN_ID,\n                    credential: process.env.PASSWORD\n                }\n            ],\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning voice signal\", { signal, callerID, myNickname })\n        });\n        peer.signal(incomingSignal);\n        // connectVoiceRef({ peer, voiceRef });\n        return peer;\n    }\n\n    const connectVoiceRef = ({ peer, voiceRef }) => {\n        // 음성 채팅 추가 부분. \n        peer.on(\"stream\", stream => {\n            console.log(\"[debug] : voiceRef\");\n            if (\"srcObject\" in voiceRef.current) {\n                console.log(\"voiceRef\", voiceRef.current)\n                voiceRef.current.srcObject = stream;\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}